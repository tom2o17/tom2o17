# Name: Thomas Clement
# Penn ID: 21828132
# I, Thomas Clement, worked on this assignment alone and did not collaborate.

# import the random module
# use "random_int = randint(1, 13)" to generate a random int from 1 - 13 and store in a variable "random_int"
from random import randint


def print_instructions():
    """
    Prints out instructions for the game.
    """
    print('Let\'s play Simple21!', '\nTry to get as close to 21 as possible, without going over.')


def ask_yes_or_no(prompt):
    """
    Displays the given prompt and asks the user for input.  If the user's input starts with 'y', returns True.
    If the user's input starts with 'n', returns False.
    For example, calling ask_yes_or_no("Do you want to play again? (y/n)")
    would display "Do you want to play again? (y/n)", wait for user input that starts with 'y' or 'n',
    and return True or False accordingly.
    """
    # Prompts the user for an input
    response = input(prompt)

    # Removes the white spaces from the input
    prompt = prompt.strip()

    # Logic for the program: returns true if the response contains a 'y' character
    # & will return false if the input contains an 'n' character
    if 'y' in response or 'Y' in response:
        return True
    elif 'n' in response or 'N' in response:
        return False




def next_card():
    """
    Returns a random "card", represented by an int between 1 and 10, inclusive.
    The "cards" are the numbers 1 through 10 and they are randomly generated, not drawn from a deck of
    limited size.  The odds of returning a 10 are four times as likely as any other value (because in an
    actual deck of cards, 10, Jack, Queen, and King all count as 10).
    """
    # Generates a random integer between one and 14, and stores it in a local variable
    player_card_1 = randint(1,13)

    # Logic for the function to return a value of ten for any integer grater than or = 10
    # that is generated by the randint() function above
    if player_card_1 >= 10:
        player_card_1 = 10
    return player_card_1



def take_another_card(computer_total_points, user_visible_card):
    """
    Strategy for computer to take another card or not.  According to the computerâ€™s own given
    total points (sum of visible cards + hidden card) and the user's sum of visible cards, you
    need to design a game strategy for the computer to win the game.
    Returns True if the strategy decides to take another card, False if the computer decides not
    to take another card.
    """
    # Given infinite draws corresponding to the rules of the game the expected value of drawing another
    # card is ~6.53 which I will approximate to 7

    # Thus a valid strategy for the computer will be to assume that the users hidden card has a value of ~7.
    user_expected = user_visible_card + 7


    # The logic below will return a value of true provided that the computer has less than
    # or equal to 14 total points and provided that the users_expected value is greater
    # than the computers total value of points
    
    #if computer_total_points <= 14 and user_expected >= computer_total_points:
    
    if computer_total_points <= 14:
        take_card = True
        return take_card

    # Similarly We do not want the computer to bust (go over 21 points) when playing the game.
    # As a result if the computers points are greater than 15, the computer will not not request
    # another card so as to avoid busting.
    elif computer_total_points > 14:
        take_card = False
        return take_card


def is_game_over(is_user_passed, is_computer_passed):
    """
    Determines if the game is over or not.
    If the given is_user_passed is set to True, the user has passed.
    If the given is_computer_passed is set to True, the computer has passed.
    This function returns True if both the user and the computer have passed,
    and False if either of them has not yet passed.
    """

    # The above logic checks to see if both of the variables defined below are true
    # then the function will return true.

    # If one or both of the variables defined in the logic below are false then the
    # function will return a value of false.
    if is_user_passed and is_computer_passed:
        return True
    else:
        return False



def print_status(is_user, name, hidden_card, visible_card, total_points):
    """
    In each turn, prints out the current status of the game.
    If is_user is set to True, the given player is the user.  In this case, print out
    the user's given name, his/her hidden card points, visible card points, and total points.
    If is_user is set to False, the given player is the computer.  In this case, print out
    the computer's given name, and his/her visible card points.

    For example, calling print_status(True, "Brandon", 4, 15, 19) would print:
    Brandon has 4 hidden point(s).
    Brandon has 15 visible point(s).
    Brandon has 19 total point(s).

    As another example, calling print_status(False, "Computer", 1, 19, 20) would print:
    Computer has 19 visible point(s).
    """
    # The logic below will print the current status of the game
    # if the is_user parameter is set to true then the function will print the information contained
    # w/n the first if statement.

    # if the is_user parameter is set to false then the function will print (notify) the user
    # only of the computers visible card.

    if is_user == True:
        print(name, "has", hidden_card, "hidden point(s)")
        print(name, 'has', visible_card, 'visible point(s)')
        print(name, 'has', total_points, 'total point(s)')
    elif is_user == False:
        print(name, 'has', visible_card, 'visible point(s)')




def print_winner(username, user_total_points, computer_name, computer_total_points):
    """
    Determines who won the game and prints the game results in the following format:
    - User's given name and the given user's total points
    - Computer's given name and the given computer's total points
    - The player who won the game and the total number of points he/she won by, or if it's a tie, nobody won.
    """

    # This block of code notifies the user that the game is over and prints the total number of points
    # for each of the two players in the game
    print('-- Game Over --')
    print(username, 'has', user_total_points, 'point(s) in total')
    print(computer_name, 'has', computer_total_points, 'point(s) in total')


    # This portion of the code determines which player has won the game depending on the total points.
    # The if block first checks to see if both the players have busted. The subsequent 'elif' statements \
    # check the other conditions for the game and prints the winner of the game
    if computer_total_points > 21 and user_total_points > 21:
        print('Neither player wins, it is a tie. You both busted!')
    elif computer_total_points > 21:
        print(username, 'wins because the computer busted!')
    elif user_total_points > 21:
        print(computer_name, 'wins because', username, 'busted!')
    elif user_total_points == computer_total_points:
        print("Nobody wins. It\'s a tie")
    elif user_total_points > computer_total_points:
        print(username, 'wins by', user_total_points - computer_total_points, 'point(s)')
    elif computer_total_points > user_total_points:
        print(computer_name, 'wins by', computer_total_points - user_total_points, 'point(s)')




def run(username, computer_name):
    """
    This function controls the overall game and logic for the given user and computer.
    """
    # User total points and computer total points are reset to 0 at the begining of the call to run()
    user_tot = 0
    comp_tot = 0

    # User and comnputer pass variables are both reset to false very time this functon is called
    comp_pass = False
    user_pass = False

    # This portion of code defines the users cards both visible and hidden as well as the users total
    # points
    user_card_v = next_card()
    user_card_h = next_card()
    user_tot = user_card_h + user_card_v

    # This portion of code defines the compiters cards both visible and hidden
    comp_card_h = next_card()
    comp_card_v = next_card()
    comp_tot = comp_card_v + comp_card_h


    # These two calls to the print_statement() function prints the stauts of the game to the user
    # for both the users own cards and the computers visible cards
    print_status(True, username, user_card_h, user_card_v, user_tot)
    print_status(False, computer_name, comp_card_h, comp_card_v, comp_tot)

    # Flow control variable named loop defined below
    loop = 0

    # The while loop is entered by default during the first trip through the default loop
    while loop == 0:

        # This if statement is also entered during the first trip through the loop as user_pass is set
        # to False by default
        if user_pass == False:
            x = ask_yes_or_no('Take another card? (y/n)')

            # Depenfing on the answer to the above call to ask_yes_or_no() the user will enter one
            # of the two if or elif blocks below

            if x == False:
                # If the user indicates that they do not want to take another card. Then the user
                # is notified that they have passed with the following print message.
                # In addition the user_pass variable is changed to true
                print('the user has passed')
                user_pass = True


            elif x:
                # If user indicates that they want to take another card then the nextcard() function is
                # called & stored & added to the users total points.
                # The user is then notified of the point value of the card that they had just drew
                newcard = next_card()
                user_tot = user_tot + newcard
                print('The', username, 'has decided to take a card.', username,
                      'gets', newcard)


        if take_another_card(comp_tot, user_card_v):
            # This if statement is entered if the take_another_card() function retruns true.
            # This occurs when the computers strategy has determined that it is in the computers
            # best interest to take another card

            # This new card is then added to the computer's total and the user is notified of the
            # value of the card that the computer has just drew

            newcard = next_card()
            comp_tot = comp_tot + newcard
            print('The computer gets', newcard)


        elif not take_another_card(comp_tot,user_card_v):
            # If the call to said function returns false then the comp_pass variable is changes to true,
            # & the user is notified through the print statement that the computer has passed
            print('The computer has passed')
            comp_pass = True

        if is_game_over(user_pass, comp_pass):
            # This if block is entered if the is_game_over() function returns true.
            # This occurs when both the user and the computer have passed.
            # if this block is entered then the "loop" flow control variable is changed to 1
            # and the program will subsequently exit the while loop.
            loop = 1

    # once the while loop as been executed the run function returns the print_winner() function &
    # the winner is then printed into the console
    return print_winner(username, user_tot, computer_name, comp_tot)


def main():
    """
    Main Function.
    """

    # print the game instructions
    print_instructions()

    # get and set user's name
    username = input("What's your name?\r\n")

    # set computer's name
    computer_name = "Computer"

    # insert the rest of the code in the main function here

    # The following variables are flow control variables that will be used to control the order of
    # functions in our program
    flow_ctrl = True
    counter = 0

    # The program will enter the while loop, this loop was intended to be inf.
    while flow_ctrl:
        if counter == 0:
            # The program will enter this if block if it is the programs first trip through the loop.
            # The run() function is then subsequently called

            run(username, computer_name)

        # After the first call to run() is completed the user is then prompted asking if they would
        # like to play again.
        play_again = ask_yes_or_no("Do you want to play again? (y/n)")

        if play_again == True:
            # If the user decides to play again, then the counter is incremented.
            # & the user is prompted asking if they want to change their name

            counter += 1
            change = ask_yes_or_no("Do you want to update your username? (y/n)")

            if change == True:
                # if the user wants to change their name they are prompted to input their username
                # the run() function is subsequently called again

                username = input('Please input your new username: ')
                run(username, computer_name)

            elif change == False:
                # if the user does not want to change their name the program will just call the
                # run() function again

                run(username, computer_name)

        elif play_again == False:
            # if the user decides that they do not want to play again then, the program will break out
            # of the loop and end.

            break

# Entry point for the program 
if __name__ == '__main__':
    main()
